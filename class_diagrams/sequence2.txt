@startuml

participant Main

-> Main : main()
activate Main

create islandGenerator
Main -> islandGenerator
activate islandGenerator

create RandomSeed
islandGenerator -> RandomSeed : set_randomseed(IslandSpecifications)
activate RandomSeed
RandomSeed --> islandGenerator
deactivate RandomSeed

create islandGeographySetter
islandGenerator -> islandGeographySetter : set_island_type(GeometryContainer, IslandSpecifications)
activate islandGeographySetter
islandGeographySetter --> islandGenerator
deactivate islandGeographySetter
islandGenerator -> islandGeographySetter : set_island_elevation(GeometryContainer, IslandSpecifications)
activate islandGeographySetter
islandGeographySetter --> islandGenerator
deactivate islandGeographySetter

create lakeGenerator
islandGenerator -> lakeGenerator : generate(GeometryContainer)
activate lakeGenerator
lakeGenerator --> islandGenerator
deactivate lakeGenerator

create riverGenerator
islandGenerator -> riverGenerator : generate(GeometryContainer)
activate riverGenerator
riverGenerator --> islandGenerator
deactivate riverGenerator

create aquiferGenerator
islandGenerator -> aquiferGenerator : generate(GeometryContainer)
activate aquiferGenerator
aquiferGenerator --> islandGenerator
deactivate aquiferGenerator

create moistureSetter
islandGenerator -> moistureSetter : calculateMoisture(GeometryContainer)
activate moistureSetter
create moistureFactory
moistureSetter -> moistureFactory: selectMoistureProfile(IslandSpecifications)
moistureFactory --> moistureSetter
deactivate moistureFactory
moistureSetter --> islandGenerator
deactivate moistureSetter

create biomeSetter
islandGenerator -> biomeSetter : setMultipleBiomes(GeometryContainer)
activate biomeSetter
create biomeFactory
biomeSetter -> biomeFactory: selectBiomeProfile(IslandSpecifications)
biomeFactory --> biomeSetter
deactivate biomeFactory
biomeSetter --> islandGenerator
deactivate biomeSetter

@enduml